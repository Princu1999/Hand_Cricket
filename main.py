"""
Fun Cricket...press keys from 1 to 6 and if the bowler(here computer) chooses the same
number...You will be declared OUT! Try to score maximum runs and have fun!!

INSTRUCTIONS ON HOW TO RUN THIS FILE:

1) Install or upgrade pygame module in your system.
2) Copy the image "ipl_logo.jpeg" in the same directory where you will put this program file and name it "ipl_logo.jpeg".
3) Run the file to play the game and see the output.


IMPORTANT --> To run this program make sure you have installed pygame module in your system. Look below for the
              instructions on how to install this module.

--> pygame: It is a free and open-source cross-platform library for the development of multimedia applications
           like video games using Python.

   Installation: To install this module type the following command in your terminal

                >> pip install pygame

   Note: If you have already installed this module, make sure you have updated it to its latest version by
         typing the following command in your terminal

         >> pip install pygame --upgrade
"""

import pygame, sys, time, random

checkErrors = pygame.init()

if checkErrors[1] > 0:
    print("(!) Had {0} initializing errors,exiting.....".format(checkErrors[1]))
    sys.exit(-1)
else:
    print("(+) pygame successfully initialized")


class game_ipl():

    def __init__(self):
        self.play_surface = pygame.display.set_mode((700, 400))  # setting size of the output window
        pygame.display.set_caption('Fun Cricket by Princu Singh')

        # colors
        self.red = pygame.Color(255, 0, 0)  # if batsman out
        self.black = pygame.Color(0, 0, 0)  # score
        self.white = pygame.Color(255, 255, 255)

        # fps controller

        self.fpsController = pygame.time.Clock()  # to control the frames per second of the game

        # background image
        self.bg = pygame.image.load("ipl_logo.jpeg")
        self.bgRect = self.bg.get_rect()

        self.runs = 0  # runs scored by the player(user)
        self.bowl = 0  # random number between 1 to 6 generated by the bowler(computer)
        self.k = 0     # random number between 1 to 6 entered by the batsman(user)

    def out(self, r):
        """
        Function to print "OUT" on the output screen
        :param r: Runs scored by the batsman(user)
        :return: None
        """
        my_font = pygame.font.SysFont('monaco', 72)
        surf = my_font.render('OUT', True, self.red)
        rect = surf.get_rect()
        rect.midtop = (350, 15)
        self.play_surface.blit(surf, rect)
        self.showscore(self.runs)
        pygame.display.flip()
        time.sleep(5)

    def showscore(self, r):
        """
        Function to print "OUT" on the output screen
        :param r: Current score of the batsman(user)
        :return: None
        """
        s_font = pygame.font.SysFont('monaco', 40)
        surf = s_font.render('Runs: {0}'.format(r), True, self.black)
        rect = surf.get_rect()
        rect.midtop = (350, 250)
        self.play_surface.blit(surf, rect)

    def batsmen(self, r):
        """
        Function to print batsman's current run on the output screen
        :param r: Current key pressed
        :return: None
        """
        s_font = pygame.font.SysFont('monaco', 70)
        surf = s_font.render('Batsman: {0}'.format(r), True, self.black)
        rect = surf.get_rect()
        rect.midtop = (150, 50)
        self.play_surface.blit(surf, rect)

    def bowler(self, r):
        """
        Function to print bowlers current key pressed on the output screen
        :param r: Current key pressed
        :return: None
        """
        s_font = pygame.font.SysFont('monaco', 70)
        surf = s_font.render('Bowler: {0}'.format(r), True, self.black)
        rect = surf.get_rect()
        rect.midtop = (550, 50)
        self.play_surface.blit(surf, rect)

    def logic(self):
        """
        Function to implement logic and show it on the output screen.
        :return: None
        """

        while True:
            for event in pygame.event.get():  # looping through the events that occured
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:  # event corresponding to any key that is pressed in the keyboard
                    self.bowl = random.randrange(1, 7)  # generating random number between 1 to 6(for bowler)

                    # if key "1" is pressed and the "1" is generated as well
                    # display out otherwise display the score
                    if event.key == pygame.K_1:  # event key corresponding to "1"
                        if self.bowl == 1:
                            self.out(self.runs)
                        else:
                            self.runs = self.runs + 1
                            self.k = 1

                    # if key "2" is pressed and the "2" is generated as well
                    # display out otherwise display the score
                    if event.key == pygame.K_2:  # event key corresponding to "2"
                        if self.bowl == 2:
                            self.out(self.runs)
                        else:
                            self.runs += 2
                            self.k = 2

                    # if key "3" is pressed and the "3" is generated as well
                    # display out otherwise display the score
                    if event.key == pygame.K_3:  # event key corresponding to "3"
                        if self.bowl == 3:
                            self.out(self.runs)
                        else:
                            self.runs += 3
                            self.k = 3

                    # if key "4" is pressed and the "4" is generated as well
                    # display out otherwise display the score
                    if event.key == pygame.K_4:  # event key corresponding to "4"
                        if self.bowl == 4:
                            self.out(self.runs)
                        else:
                            self.runs += 4
                            self.k = 4

                    # if key "5" is pressed and the "5" is generated as well
                    # display out otherwise display the score
                    if event.key == pygame.K_5:  # event key corresponding to "5"
                        if self.bowl == 5:
                            self.out(self.runs)
                        else:
                            self.runs += 5
                            self.k = 5

                    # if key "6" is pressed and the "6" is generated as well
                    # display out otherwise display the score
                    if event.key == pygame.K_6:  # event key corresponding to "6"
                        if self.bowl == 6:
                            self.out(self.runs)
                        else:
                            self.runs += 6
                            self.k = 6

                    if event.key == pygame.K_ESCAPE:  # event key corresponding to "esc"
                        pygame.event.post(pygame.event.Event(pygame.QUIT))

                    # drawing the final output
                    self.play_surface.fill(self.white)
                    self.play_surface.blit(self.bg, self.bgRect)
                    self.batsmen(self.k)
                    self.bowler(self.bowl)
                    self.showscore(self.runs)
                    pygame.display.flip()
                    self.fpsController.tick(20)


obj = game_ipl()  # Creating the object of class game_ipl
obj.logic()  # calling the member function of class game_ipl
